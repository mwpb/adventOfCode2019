package com.mwpb;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

import java.lang.reflect.Array;
import java.util.Arrays;

import static org.junit.jupiter.api.Assertions.*;

class Aoc16Test {

    @Test
    void getPattern() {
//        Aoc16 aoc16 = new Aoc16("59793513516782374825915243993822865203688298721919339628274587775705006728427921751430533510981343323758576985437451867752936052153192753660463974146842169169504066730474876587016668826124639010922391218906707376662919204980583671961374243713362170277231101686574078221791965458164785925384486127508173239563372833776841606271237694768938831709136453354321708319835083666223956618272981294631469954624760620412170069396383335680428214399523030064601263676270903213996956414287336234682903859823675958155009987384202594409175930384736760416642456784909043049471828143167853096088824339425988907292558707480725410676823614387254696304038713756368483311");
//        System.out.println(Arrays.toString(aoc16.getPattern(2)));
    }

    @Test
    void update() {
        Aoc16 aoc16test = new Aoc16("12345678");
        aoc16test.update();
        Assertions.assertArrayEquals(new int[] {4, 8, 2, 2, 6, 1, 5, 8}, aoc16test.signal);
        aoc16test.update();
        Assertions.assertArrayEquals(new int[] {3, 4, 0, 4, 0, 4, 3, 8}, aoc16test.signal);
        aoc16test.update();
        Assertions.assertArrayEquals(new int[] {0, 3, 4, 1, 5, 5, 1, 8}, aoc16test.signal);
        aoc16test.update();
        Assertions.assertArrayEquals(new int[] {0, 1, 0, 2, 9, 4, 9, 8}, aoc16test.signal);
//        System.out.println(Arrays.toString(aoc16.update()));
        Aoc16 aoc16test1 = new Aoc16("80871224585914546619083218645595");
        for (int i = 0; i < 100; i++) {
            aoc16test1.update();
        }
        System.out.println(Arrays.toString(aoc16test1.signal));

        Aoc16 aoc16test2 = new Aoc16("19617804207202209144916044189917");
        for (int i = 0; i < 100; i++) {
            aoc16test2.update();
        }
        System.out.println(Arrays.toString(aoc16test2.signal));

        Aoc16 aoc16test3 = new Aoc16("69317163492948606335995924319873");
        for (int i = 0; i < 100; i++) {
            aoc16test3.update();
        }
        System.out.println(Arrays.toString(aoc16test3.signal));

        Aoc16 aoc16 = new Aoc16("59793513516782374825915243993822865203688298721919339628274587775705006728427921751430533510981343323758576985437451867752936052153192753660463974146842169169504066730474876587016668826124639010922391218906707376662919204980583671961374243713362170277231101686574078221791965458164785925384486127508173239563372833776841606271237694768938831709136453354321708319835083666223956618272981294631469954624760620412170069396383335680428214399523030064601263676270903213996956414287336234682903859823675958155009987384202594409175930384736760416642456784909043049471828143167853096088824339425988907292558707480725410676823614387254696304038713756368483311");
        for (int i = 0; i < 100; i++) {
            aoc16.update();
        }
        System.out.println(Arrays.toString(aoc16.signal));
    }

    @Test
    void realMessage() {
        Aoc16 aoc16test = new Aoc16("03036732577212944063491565474664");
        Assertions.assertEquals(84462026, aoc16test.realMessage());

        Aoc16 aoc16test1 = new Aoc16("02935109699940807407585447034323");
        Assertions.assertEquals(78725270, aoc16test1.realMessage());

        Aoc16 aoc16test2 = new Aoc16("03081770884921959731165446850517");
        Assertions.assertEquals(53553731, aoc16test2.realMessage());

        Aoc16 aoc16 = new Aoc16("59793513516782374825915243993822865203688298721919339628274587775705006728427921751430533510981343323758576985437451867752936052153192753660463974146842169169504066730474876587016668826124639010922391218906707376662919204980583671961374243713362170277231101686574078221791965458164785925384486127508173239563372833776841606271237694768938831709136453354321708319835083666223956618272981294631469954624760620412170069396383335680428214399523030064601263676270903213996956414287336234682903859823675958155009987384202594409175930384736760416642456784909043049471828143167853096088824339425988907292558707480725410676823614387254696304038713756368483311");
        Assertions.assertEquals(55078585, aoc16.realMessage());
    }
}