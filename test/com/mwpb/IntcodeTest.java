package com.mwpb;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

import java.util.*;

import static org.junit.jupiter.api.Assertions.*;

class IntcodeTest {

    @Test
    void run() {
        Intcode test1 = new Intcode("1,9,10,3,2,3,11,0,99,30,40,50");
        test1.run();
        long[] expected1 = new long[] {3500, 9, 10, 70, 2, 3, 11, 0, 99, 30, 40, 50};
        Assertions.assertArrayEquals(expected1, Arrays.copyOfRange(test1.memory, 0, expected1.length));

        Intcode test2 = new Intcode("1,0,0,0,99");
        test2.run();
        long[] expected2 = new long[] {2, 0, 0, 0, 99};
        Assertions.assertArrayEquals(expected2, Arrays.copyOfRange(test2.memory, 0, expected2.length));

        Intcode test3 = new Intcode("2,3,0,3,99");
        test3.run();
        long[] expected3 = new long[] {2, 3, 0, 6, 99};
        Assertions.assertArrayEquals(expected3, Arrays.copyOfRange(test3.memory, 0, expected3.length));

        Intcode test4 = new Intcode("2,4,4,5,99,0");
        test4.run();
        long[] expected4 = new long[] {2,4,4,5,99,9801};
        Assertions.assertArrayEquals(expected4, Arrays.copyOfRange(test4.memory, 0, expected4.length));

        Intcode test5 = new Intcode("1,1,1,4,99,5,6,0,99");
        test5.run();
        long[] expected5 = new long[] {30,1,1,4,2,5,6,0,99};
        Assertions.assertArrayEquals(expected5, Arrays.copyOfRange(test5.memory, 0, expected5.length));

        Intcode test6 = new Intcode("1002,4,3,4,33");
        test6.run();
        long[] expected6 = new long[] {1002,4,3,4,99};
        Assertions.assertArrayEquals(expected6, Arrays.copyOfRange(test6.memory, 0, expected6.length));

        Intcode test7 = new Intcode("3,9,8,9,10,9,4,9,99,-1,8");
        test7.input = new LinkedList<Integer>(List.of(1));
        Assertions.assertEquals(0, test7.run().get());

        Intcode test8 = new Intcode("3,9,8,9,10,9,4,9,99,-1,8");
        test8.input = new LinkedList<Integer>(List.of(8));
        Assertions.assertEquals(1, test8.run().get());

        Intcode test9 = new Intcode("3,9,7,9,10,9,4,9,99,-1,8");
        test9.input = new LinkedList<Integer>(List.of(1));
        Assertions.assertEquals(1, test9.run().get());

        Intcode test10 = new Intcode("3,9,7,9,10,9,4,9,99,-1,8");
        test10.input = new LinkedList<Integer>(List.of(8));
        Assertions.assertEquals(0, test10.run().get());

        Intcode test11 = new Intcode("3,3,1108,-1,8,3,4,3,99");
        test11.input = new LinkedList<Integer>(List.of(1));
        Assertions.assertEquals(0, test11.run().get());

        Intcode test12 = new Intcode("3,3,1108,-1,8,3,4,3,99");
        test12.input = new LinkedList<Integer>(List.of(8));
        Assertions.assertEquals(1, test12.run().get());

        Intcode test13 = new Intcode("3,3,1107,-1,8,3,4,3,99");
        test13.input = new LinkedList<Integer>(List.of(1));
        Assertions.assertEquals(1, test13.run().get());

        Intcode test14 = new Intcode("3,3,1107,-1,8,3,4,3,99");
        test14.input = new LinkedList<Integer>(List.of(8));
        Assertions.assertEquals(0, test14.run().get());

        Intcode test15 = new Intcode("3,12,6,12,15,1,13,14,13,4,13,99,-1,0,1,9");
        test15.input = new LinkedList<Integer>(List.of(0));
        Assertions.assertEquals(0, test15.run().get());

        Intcode test16 = new Intcode("3,12,6,12,15,1,13,14,13,4,13,99,-1,0,1,9");
        test16.input = new LinkedList<Integer>(List.of(8));
        Assertions.assertEquals(1, test16.run().get());

        Intcode test17 = new Intcode("3,3,1105,-1,9,1101,0,0,12,4,12,99,1");
        test17.input = new LinkedList<Integer>(List.of(0));
        Assertions.assertEquals(0, test17.run().get());

        Intcode test18 = new Intcode("3,3,1105,-1,9,1101,0,0,12,4,12,99,1");
        test18.input = new LinkedList<Integer>(List.of(8));
        Assertions.assertEquals(1, test18.run().get());

        Intcode test19 = new Intcode("3,21,1008,21,8,20,1005,20,22,107,8,21,20,1006,20,31,1106,0,36,98,0,0,1002,21,125,20,4,20,1105,1,46,104,999,1105,1,46,1101,1000,1,20,4,20,1105,1,46,98,99");
        test19.input = new LinkedList<Integer>(List.of(-1));
        Assertions.assertEquals(999, test19.run().get());

        Intcode test20 = new Intcode("3,21,1008,21,8,20,1005,20,22,107,8,21,20,1006,20,31,1106,0,36,98,0,0,1002,21,125,20,4,20,1105,1,46,104,999,1105,1,46,1101,1000,1,20,4,20,1105,1,46,98,99");
        test20.input = new LinkedList<Integer>(List.of(8));
        Assertions.assertEquals(1000, test20.run().get());

        Intcode test21 = new Intcode("3,21,1008,21,8,20,1005,20,22,107,8,21,20,1006,20,31,1106,0,36,98,0,0,1002,21,125,20,4,20,1105,1,46,104,999,1105,1,46,1101,1000,1,20,4,20,1105,1,46,98,99");
        test21.input = new LinkedList<Integer>(List.of(14));
        Assertions.assertEquals(1001, test21.run().get());

        Intcode test22 = new Intcode("109,1,204,-1,1001,100,1,100,1008,100,16,101,1006,101,0,99");
        System.out.println(test22.run());
        System.out.println(test22.run());

        Intcode test23 = new Intcode("1102,34915192,34915192,7,4,7,99,0");
        Assertions.assertEquals(1219070632396864L, test23.run().get());

        Intcode test24 = new Intcode("104,1125899906842624,99");
        Assertions.assertEquals(1125899906842624L, test24.run().get());
    }

    @Test
    void day9() {
        Intcode test = new Intcode("1102,34463338,34463338,63,1007,63,34463338,63,1005,63,53,1102,3,1,1000,109,988,209,12,9,1000,209,6,209,3,203,0,1008,1000,1,63,1005,63,65,1008,1000,2,63,1005,63,904,1008,1000,0,63,1005,63,58,4,25,104,0,99,4,0,104,0,99,4,17,104,0,99,0,0,1102,33,1,1011,1102,1,26,1010,1101,0,594,1029,1101,0,20,1018,1102,38,1,1000,1102,35,1,1001,1101,800,0,1023,1101,0,599,1028,1101,0,34,1013,1101,0,737,1026,1102,21,1,1005,1102,1,0,1020,1102,1,195,1024,1101,31,0,1016,1101,0,1,1021,1102,22,1,1004,1102,1,32,1014,1102,37,1,1019,1102,36,1,1002,1101,23,0,1003,1102,190,1,1025,1101,28,0,1009,1101,807,0,1022,1102,30,1,1015,1101,0,27,1017,1102,1,25,1012,1102,1,39,1008,1101,0,29,1007,1101,734,0,1027,1101,0,24,1006,109,28,2105,1,-4,4,187,1105,1,199,1001,64,1,64,1002,64,2,64,109,-19,1208,-9,37,63,1005,63,219,1001,64,1,64,1106,0,221,4,205,1002,64,2,64,109,20,1206,-8,233,1106,0,239,4,227,1001,64,1,64,1002,64,2,64,109,-29,2101,0,4,63,1008,63,21,63,1005,63,259,1106,0,265,4,245,1001,64,1,64,1002,64,2,64,109,-2,2107,37,4,63,1005,63,285,1001,64,1,64,1106,0,287,4,271,1002,64,2,64,109,14,1206,8,301,4,293,1105,1,305,1001,64,1,64,1002,64,2,64,109,11,21101,40,0,-6,1008,1017,40,63,1005,63,331,4,311,1001,64,1,64,1105,1,331,1002,64,2,64,109,-21,1208,1,23,63,1005,63,353,4,337,1001,64,1,64,1106,0,353,1002,64,2,64,109,26,1205,-7,371,4,359,1001,64,1,64,1106,0,371,1002,64,2,64,109,-15,21102,41,1,2,1008,1015,40,63,1005,63,395,1001,64,1,64,1106,0,397,4,377,1002,64,2,64,109,-3,2108,22,-6,63,1005,63,415,4,403,1105,1,419,1001,64,1,64,1002,64,2,64,109,-6,1201,-4,0,63,1008,63,35,63,1005,63,439,1106,0,445,4,425,1001,64,1,64,1002,64,2,64,109,14,21102,42,1,-4,1008,1014,42,63,1005,63,467,4,451,1105,1,471,1001,64,1,64,1002,64,2,64,109,-23,1201,10,0,63,1008,63,21,63,1005,63,497,4,477,1001,64,1,64,1105,1,497,1002,64,2,64,109,16,21101,43,0,2,1008,1013,42,63,1005,63,521,1001,64,1,64,1105,1,523,4,503,1002,64,2,64,109,3,21107,44,45,1,1005,1015,541,4,529,1105,1,545,1001,64,1,64,1002,64,2,64,109,-2,1205,8,561,1001,64,1,64,1106,0,563,4,551,1002,64,2,64,109,-7,1207,2,28,63,1005,63,579,1106,0,585,4,569,1001,64,1,64,1002,64,2,64,109,24,2106,0,-1,4,591,1106,0,603,1001,64,1,64,1002,64,2,64,109,-4,21108,45,45,-9,1005,1016,625,4,609,1001,64,1,64,1105,1,625,1002,64,2,64,109,-24,2101,0,0,63,1008,63,35,63,1005,63,651,4,631,1001,64,1,64,1106,0,651,1002,64,2,64,109,10,1202,-7,1,63,1008,63,24,63,1005,63,675,1001,64,1,64,1105,1,677,4,657,1002,64,2,64,109,-2,2102,1,-1,63,1008,63,41,63,1005,63,697,1105,1,703,4,683,1001,64,1,64,1002,64,2,64,109,-2,21108,46,45,3,1005,1010,723,1001,64,1,64,1105,1,725,4,709,1002,64,2,64,109,28,2106,0,-8,1106,0,743,4,731,1001,64,1,64,1002,64,2,64,109,-37,2102,1,3,63,1008,63,35,63,1005,63,769,4,749,1001,64,1,64,1105,1,769,1002,64,2,64,109,26,21107,47,46,-8,1005,1016,789,1001,64,1,64,1106,0,791,4,775,1002,64,2,64,109,7,2105,1,-8,1001,64,1,64,1106,0,809,4,797,1002,64,2,64,109,-37,1202,7,1,63,1008,63,35,63,1005,63,831,4,815,1105,1,835,1001,64,1,64,1002,64,2,64,109,18,1207,-5,30,63,1005,63,853,4,841,1106,0,857,1001,64,1,64,1002,64,2,64,109,-7,2108,37,-5,63,1005,63,873,1105,1,879,4,863,1001,64,1,64,1002,64,2,64,109,-7,2107,23,8,63,1005,63,897,4,885,1106,0,901,1001,64,1,64,4,64,99,21101,27,0,1,21102,1,915,0,1106,0,922,21201,1,12374,1,204,1,99,109,3,1207,-2,3,63,1005,63,964,21201,-2,-1,1,21101,942,0,0,1105,1,922,22102,1,1,-1,21201,-2,-3,1,21102,957,1,0,1105,1,922,22201,1,-1,-2,1106,0,968,21201,-2,0,-2,109,-3,2106,0,0");
        test.input = new LinkedList<Integer>(List.of(1));
        Assertions.assertEquals(3429606717L, test.run().get());

        Intcode test2 = new Intcode("1102,34463338,34463338,63,1007,63,34463338,63,1005,63,53,1102,3,1,1000,109,988,209,12,9,1000,209,6,209,3,203,0,1008,1000,1,63,1005,63,65,1008,1000,2,63,1005,63,904,1008,1000,0,63,1005,63,58,4,25,104,0,99,4,0,104,0,99,4,17,104,0,99,0,0,1102,33,1,1011,1102,1,26,1010,1101,0,594,1029,1101,0,20,1018,1102,38,1,1000,1102,35,1,1001,1101,800,0,1023,1101,0,599,1028,1101,0,34,1013,1101,0,737,1026,1102,21,1,1005,1102,1,0,1020,1102,1,195,1024,1101,31,0,1016,1101,0,1,1021,1102,22,1,1004,1102,1,32,1014,1102,37,1,1019,1102,36,1,1002,1101,23,0,1003,1102,190,1,1025,1101,28,0,1009,1101,807,0,1022,1102,30,1,1015,1101,0,27,1017,1102,1,25,1012,1102,1,39,1008,1101,0,29,1007,1101,734,0,1027,1101,0,24,1006,109,28,2105,1,-4,4,187,1105,1,199,1001,64,1,64,1002,64,2,64,109,-19,1208,-9,37,63,1005,63,219,1001,64,1,64,1106,0,221,4,205,1002,64,2,64,109,20,1206,-8,233,1106,0,239,4,227,1001,64,1,64,1002,64,2,64,109,-29,2101,0,4,63,1008,63,21,63,1005,63,259,1106,0,265,4,245,1001,64,1,64,1002,64,2,64,109,-2,2107,37,4,63,1005,63,285,1001,64,1,64,1106,0,287,4,271,1002,64,2,64,109,14,1206,8,301,4,293,1105,1,305,1001,64,1,64,1002,64,2,64,109,11,21101,40,0,-6,1008,1017,40,63,1005,63,331,4,311,1001,64,1,64,1105,1,331,1002,64,2,64,109,-21,1208,1,23,63,1005,63,353,4,337,1001,64,1,64,1106,0,353,1002,64,2,64,109,26,1205,-7,371,4,359,1001,64,1,64,1106,0,371,1002,64,2,64,109,-15,21102,41,1,2,1008,1015,40,63,1005,63,395,1001,64,1,64,1106,0,397,4,377,1002,64,2,64,109,-3,2108,22,-6,63,1005,63,415,4,403,1105,1,419,1001,64,1,64,1002,64,2,64,109,-6,1201,-4,0,63,1008,63,35,63,1005,63,439,1106,0,445,4,425,1001,64,1,64,1002,64,2,64,109,14,21102,42,1,-4,1008,1014,42,63,1005,63,467,4,451,1105,1,471,1001,64,1,64,1002,64,2,64,109,-23,1201,10,0,63,1008,63,21,63,1005,63,497,4,477,1001,64,1,64,1105,1,497,1002,64,2,64,109,16,21101,43,0,2,1008,1013,42,63,1005,63,521,1001,64,1,64,1105,1,523,4,503,1002,64,2,64,109,3,21107,44,45,1,1005,1015,541,4,529,1105,1,545,1001,64,1,64,1002,64,2,64,109,-2,1205,8,561,1001,64,1,64,1106,0,563,4,551,1002,64,2,64,109,-7,1207,2,28,63,1005,63,579,1106,0,585,4,569,1001,64,1,64,1002,64,2,64,109,24,2106,0,-1,4,591,1106,0,603,1001,64,1,64,1002,64,2,64,109,-4,21108,45,45,-9,1005,1016,625,4,609,1001,64,1,64,1105,1,625,1002,64,2,64,109,-24,2101,0,0,63,1008,63,35,63,1005,63,651,4,631,1001,64,1,64,1106,0,651,1002,64,2,64,109,10,1202,-7,1,63,1008,63,24,63,1005,63,675,1001,64,1,64,1105,1,677,4,657,1002,64,2,64,109,-2,2102,1,-1,63,1008,63,41,63,1005,63,697,1105,1,703,4,683,1001,64,1,64,1002,64,2,64,109,-2,21108,46,45,3,1005,1010,723,1001,64,1,64,1105,1,725,4,709,1002,64,2,64,109,28,2106,0,-8,1106,0,743,4,731,1001,64,1,64,1002,64,2,64,109,-37,2102,1,3,63,1008,63,35,63,1005,63,769,4,749,1001,64,1,64,1105,1,769,1002,64,2,64,109,26,21107,47,46,-8,1005,1016,789,1001,64,1,64,1106,0,791,4,775,1002,64,2,64,109,7,2105,1,-8,1001,64,1,64,1106,0,809,4,797,1002,64,2,64,109,-37,1202,7,1,63,1008,63,35,63,1005,63,831,4,815,1105,1,835,1001,64,1,64,1002,64,2,64,109,18,1207,-5,30,63,1005,63,853,4,841,1106,0,857,1001,64,1,64,1002,64,2,64,109,-7,2108,37,-5,63,1005,63,873,1105,1,879,4,863,1001,64,1,64,1002,64,2,64,109,-7,2107,23,8,63,1005,63,897,4,885,1106,0,901,1001,64,1,64,4,64,99,21101,27,0,1,21102,1,915,0,1106,0,922,21201,1,12374,1,204,1,99,109,3,1207,-2,3,63,1005,63,964,21201,-2,-1,1,21101,942,0,0,1105,1,922,22102,1,1,-1,21201,-2,-3,1,21102,957,1,0,1105,1,922,22201,1,-1,-2,1106,0,968,21201,-2,0,-2,109,-3,2106,0,0");
        test2.input = new LinkedList<Integer>(List.of(2));
        Assertions.assertEquals(33679, test2.run().get());
    }
}